import math

# 跟顺序有关
def pearson(vector1, vector2):
    n = len(vector1)
    #simple sums
    sum1 = sum(float(vector1[i]) for i in range(n))
    sum2 = sum(float(vector2[i]) for i in range(n))
    #sum up the squares
    sum1_pow = sum([pow(v, 2.0) for v in vector1])
    sum2_pow = sum([pow(v, 2.0) for v in vector2])
    #sum up the products
    p_sum = sum([vector1[i]*vector2[i] for i in range(n)])
    #分子num，分母den
    num = p_sum - (sum1*sum2/n)
    den = math.sqrt((sum1_pow-pow(sum1, 2)/n)*(sum2_pow-pow(sum2, 2)/n))
    if den == 0:
        return 0.0
    return num/den

if __name__ == '__main__':

    # benign
    #3-5
    # v1 = [0.845,0.786,0.7,0.457]
    # v2 = [0.957,0.957,0.952,0.949] #0  0.94
    # v2 = [0.973,0.968,0.979,0.979]#1
    # v2 = [0.919,0.907,0.927,0.918]#2
    # v2 = [0.954,0.959,0.956,0.957]#4
    # v2 = [0.913,0.927,0.933,0.941]#5  -0.98
    # v2 = [0.959,0.962,0.966,0.968]#6  -0.9
    # v2 = [0.96,0.965,0.959,0.963]#7
    # v2 = [0.957,0.974,0.968,0.964]#8
    # v2 = [0.957,0.964,0.96,0.966]#9

    #0-8
    v1 = [0.935,0.902,0.859,0.707]
    v2 = [0.978,0.973,0.973,0.972] #1
    # v2 = [0.915,0.906,0.908,0.92]#2
    # v2 = [0.859,0.884,0.873,0.867]#3
    # v2 = [0.955,0.967,0.953,0.951]#4
    # v2 = [0.908,0.906,0.901,0.897]#5 0.94
    # v2 = [0.959,0.963,0.953,0.956]#6
    # v2 = [0.95,0.957,0.959,0.956]#7
    # v2 = [0.969,0.972,0.97,0.977]#8 -0.91
    # v2 = [0.961,0.967,0.958,0.96]#9

    #robust
    # 1-2
    # v1 = []
    # v2 = []
    # 3-5
    # v1 = [-2.92,-0.62,-2.22,-1.02]
    # v2 = [-2.42,-2.22,-0.12,-1.32]
    # 4-6
    # v1 = []
    # v2 = []

    # 0-8
    # v1 = []
    # v2 = []

    # 1-9
    # v1 = [-1.42,-0.92,-0.62,0.78]
    # v2 = [-1.72,-2.32,-0.82,-0.42]
    # v1 = sorted(v1)
    # v2 = sorted(v2)

    val = pearson(v1, v2)
    print(val)